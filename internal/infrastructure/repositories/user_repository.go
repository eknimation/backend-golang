package repositories

import (
	"context"
	"errors"
	"time"

	"backend-service/internal/domain"
	"backend-service/internal/infrastructure/database/models"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

func (r *Repo) CreateUser(user domain.User) error {
	// Create a context with a timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Map domain.User to models.UserModel
	dbModel := models.UserModel{
		// ID will be auto-generated by MongoDB if omitempty is set and ID is zero value
		Name:      user.Name,
		Email:     user.Email,
		Password:  user.Password,
		CreatedAt: time.Now(),
	}

	// Get the "users" collection
	collection := r.db.Collection("users")

	// Insert the user document
	_, err := collection.InsertOne(ctx, dbModel)
	if err != nil {
		// Check if the error is a duplicate key error (email already exists)
		if mongo.IsDuplicateKeyError(err) {
			return errors.New("email already exists")
		}
		return err
	}

	return nil
}

func (r *Repo) GetUserByEmail(email string) (*domain.User, error) {
	// Create a context with a timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Get the "users" collection
	collection := r.db.Collection("users")

	// Find user by email
	var userModel models.UserModel
	err := collection.FindOne(ctx, bson.M{"email": email}).Decode(&userModel)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, errors.New("user not found")
		}
		return nil, err
	}

	// Map models.UserModel to domain.User
	user := &domain.User{
		ID:        userModel.ID.Hex(),
		Name:      userModel.Name,
		Email:     userModel.Email,
		Password:  userModel.Password,
		CreatedAt: &userModel.CreatedAt,
	}

	return user, nil
}

func (r *Repo) GetUserByID(id string) (*domain.User, error) {
	// Create a context with a timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Convert string ID to ObjectID
	objectID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, errors.New("invalid user ID format")
	}

	// Get the "users" collection
	collection := r.db.Collection("users")

	// Find user by ID
	var userModel models.UserModel
	err = collection.FindOne(ctx, bson.M{"_id": objectID}).Decode(&userModel)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, errors.New("user not found")
		}
		return nil, err
	}

	// Map models.UserModel to domain.User
	user := &domain.User{
		ID:        userModel.ID.Hex(),
		Name:      userModel.Name,
		Email:     userModel.Email,
		CreatedAt: &userModel.CreatedAt,
	}

	return user, nil
}
