basePath: /
definitions:
  controllers.LoginDTO:
    properties:
      email:
        example: jimmy@example.com
        type: string
      password:
        example: pas$worD123
        type: string
    required:
    - email
    - password
    type: object
  controllers.LoginResponseDTO:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.PaginationResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      totalItems:
        example: 25
        type: integer
      totalPages:
        example: 3
        type: integer
    type: object
  controllers.UserDTO:
    properties:
      email:
        example: jimmy@example.com
        type: string
      name:
        example: Jimmy
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: pas$worD123
        type: string
    required:
    - email
    - name
    - password
    type: object
  controllers.UserListResponseDTO:
    properties:
      pagination:
        $ref: '#/definitions/controllers.PaginationResponse'
      users:
        items:
          $ref: '#/definitions/controllers.UserResponseDTO'
        type: array
    type: object
  controllers.UserResponseDTO:
    properties:
      createdAt:
        example: "2023-01-01T00:00:00Z"
        type: string
      email:
        example: jimmy@example.com
        type: string
      id:
        example: 507f1f77bcf86cd799439011
        type: string
      name:
        example: Jimmy
        type: string
    type: object
  responses.ErrorDetail:
    properties:
      message:
        example: Internal Server Error
        type: string
      stack:
        example: Error:Database error
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        example: UNHANDLED_EXCEPTION
        type: string
      error:
        $ref: '#/definitions/responses.ErrorDetail'
    type: object
  responses.Response:
    properties:
      code:
        example: SUCCESS
        type: string
      data: {}
      message:
        example: successfully
        type: string
    type: object
host: localhost:5555
info:
  contact:
    email: eknimation@gmail.com
    name: Akekapon S.
  description: Backend service API for user management and authentication
  title: Backend Go API
  version: v1.0.0
paths:
  /v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve all users in the system with pagination
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/controllers.UserListResponseDTO'
              type: object
        "400":
          description: Bad Request - Invalid pagination parameters
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user account with name, email and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.Response'
        "400":
          description: Bad Request - Validation failed or email already exists
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create User
      tags:
      - Users
  /v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a user's details by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/controllers.UserResponseDTO'
              type: object
        "400":
          description: Bad Request - Invalid user ID format
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found - User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User by ID
      tags:
      - Users
  /v1/users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returns JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/responses.Response'
            - properties:
                data:
                  $ref: '#/definitions/controllers.LoginResponseDTO'
              type: object
        "400":
          description: Bad Request - Validation failed
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized - Invalid credentials
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Authenticate User
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: 'Bearer token for JWT authentication. Format: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
